import 'dart:io';
import 'dart:convert';

// Clase de Usuario
class User {
  late String _name, _password;

// Constructor
  User(
    String name,
    String password,
  ) {
    _name = name;
    _password = password;
  }

// Getter
  String get getName => _name;
  String get getPassword => _password;

// Setter
  set setName(String name) => _name = name;
  set setPassword(String password) => _password = password;

// Check la existencia de usuario, si es nuevo usuario, guardar el archivo.
  static Future<void> checkUser() async {
    final file = File('user.json');

    try {
      if (await file.exists()) {
        final content = await file.readAsString();
        final userData = jsonDecode(content);
        print(
            '=== ¬°Hola ${userData['name']}! Qu√© alegr√≠a de verte otra vez. ===');
      } else {
        print('=== ¬°Bienvenid@! Por favor, registrate primero. === \n');

        String name, password;

        do {
          stdout.write('Tu nombre(solo letras y n√∫meros) : ');
          name = stdin.readLineSync()!.trim();
        } while (!RegExp(r'^[a-zA-Z0-9]+$').hasMatch(name));

        do {
          stdout.write('Contrase√±a : ');
          password = stdin.readLineSync()!.trim();
        } while (password.isEmpty);

        // Crear nuevo usuario y guardar su dato
        User newUser = User(name, password);

        await file.writeAsString(jsonEncode({
          'name': newUser.getName,
          'password': newUser.getPassword,
        }));

        print('''

### 
¬°Bien hecho $name!,
Te recordar√© hasta que uses '--borrar' comando. 
Vamos a empezar. üôå
###''');
      }
    } catch (e) {
      print('error');
    }
  }

  // Borrar los datos de usuario para el test, o resetear la contrase√±a.
  static Future<void> deleteUserData() async {
    final file = File('user.json');
    await file.delete();

    print('### Tu dato est√° borrado.');
  }
}

//////////////

// Main menu
  void showMainMenu() {
    // Inicializar el comando
    command = null;

    print('''

### C O M A N D O S üëá ###
-> Login/Logout: --login/--logout
-> Ver IMC de pokemon(Buscar con el nombre): --b
-> Ver IMC de pokemon al azar: --a
-> Calcular mi IMC: --imc
-> Borrar mis datos: --borrar
-> Salir: --s

  ''');

    // Comando input prompt
    if (command == null) {
      do {
        stdout.write('> ');
        command = stdin.readLineSync()!.trim();
      } while (!RegExp(r'^--[a-z]+$').hasMatch(command!));
      exeCommand(command!);
    } else {
      exeCommand(command!);
    }
  }

// Ejecutar el comando
  void exeCommand(String command) {
    switch (command) {
      case '--login':
        break;
      case '--logout':
        break;
      case '--b':
        print('\n üîç Buscar IMC del pokemon por nombre \n');
        break;
      case '--a':
        print('\n üé≤ Ver IMC del pokemon al azar \n');
        break;
      case '--imc':
        print('\n üçé Calcular mi IMC \n');
        ImcCalculator.getMyImc();
        break;
      case '--s':
        print('''

### ¬°Hasta luego! üëã
                                    
  ''');
        break;
      case '--borrar':
        User.deleteUserData();
        break;
      default:
        print('Comando incorrecto. Reintenta por favor.');
        showMainMenu();
    }
  }
